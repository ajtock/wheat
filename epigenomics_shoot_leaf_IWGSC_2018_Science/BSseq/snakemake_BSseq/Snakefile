# Snakemake workflow for automated processing of DNA methylation data
# derived from whole-genome bisulfite sequencing (WGBS or BS-seq)
# Adapted from https://github.com/seb-mueller/snakemake-bisulfite

## ***IMPORTANT***: This Snakemake pipeline should not be run with
## Bismark version 0.21.0 or later due to the addition of HISAT2 support,
## which requires Python 2, which conflicts with the Python 3 requirements
## of other parts of this pipeline (e.g., pigz part of trim_galore rule)

# Chromosome sizes file below ("data/index/wheat_v1.0.fa.sizes") must exist
# before running snakemake
# e.g., in "data/index/" run:
# samtools faidx wheat_v1.0.fa; cut -f1,2 wheat_v1.0.fa.fai > wheat_v1.0.fa.sizes

# Usage (snakemake --cores should reflect available cores):
# conda env create --file environment.yaml --name BSseq_mapping
# source activate BSseq_mapping
# snakemake -p --cores 48
# conda deactivate

import pandas as pd
import os

# To make rules work with a shell script invoked using the "shell" directive,
# we need to determine the base path of Snakefile since we expect the scripts directory to be there as well
SRCDIR = srcdir("")

# Specify config file parameters
configfile: "config.yaml"
sample                   = config["SAMPLES"]
# An alternative approach would be globbing for filenames:
#sample = glob_wildcards("data/{S}_R1.fastq.gz").S
reference                = config["MAPPING"]["reference"]
refbase                  = config["MAPPING"]["reference_prefix"]
#genomeBinName = config["COVERAGE"]["genomeBinName"]

#extra_params_trim_galore = config["TRIM"]["extra_params_trim_galore"]
#extra_params_bismark           = config['MAPPING']['extra_params_bismark']
#BINSIZE                        = config['REPORT']['binsize']
#extra_params_bamCoverage       = config['REPORT']['extra_params_bamCoverage']
#extra_params_meth_extractor    = config['REPORT']['extra_params_meth_extractor']
#extra_params_bismark2bedGraph  = config['REPORT']['extra_params_bismark2bedGraph']
#extra_params_coverage2cytosine = config['REPORT']['extra_params_coverage2cytosine']

mate    = ['R1', 'R2']
context = ['CpG','CHG','CHH']

print(sample)
print(reference)
print(refbase)
print(mate)
print(context)


# Determine bam index format (bai or csi) based on chromosome sizes
# Genomes with chromosomes longer than ~500 Mb (e.g., in wheat) require a csi index
# E.g., in axolotl: https://sourceforge.net/p/samtools/mailman/message/36249039/
chrSizes = pd.read_table("data/index/" + refbase + ".fa.sizes",
                         header = None)
smallChrs = 0
for x in chrSizes[1]:
    if x < 5e+08:
        smallChrs = smallChrs + 1

if smallChrs < len(chrSizes[1]):
    bamidx = "csi"
else:
    bamidx = "bai"

# bash safe mode
shell.executable("/bin/bash")
shell.prefix("set -euo pipefail; ")

# ruleorder: fastqc_raw > trim_galore > fastqc_trimmed > bismark > deduplicate_bismark > samtools > bamCoverage > methylation_extractor > bismark2bedGraph

rule all:
    input:
        ## fastqc_raw
        #expand("logs/fastqc/raw/{sample}_{mate}_fastqc.html",
        #       sample = sample,
        #       mate = mate),       
        ## trim_galore
        #expand("trimmed/{sample}_{mate}_trimmed.fastq.gz",
        #       sample = sample,
        #       mate = mate),
        ## fastqc_trimmed
        #expand("logs/fastqc/trimmed/{sample}_{mate}_trimmed_fastqc.html",
        #       sample = sample,
        #       mate = mate),       
        ## bismark
        #expand("mapped/{sample}_MappedOn_{refbase}.bam",
        #       sample = sample,
        #       refbase = refbase),
        ## deduplicate_bismark
        #expand("mapped/dedup/{sample}_MappedOn_{refbase}_dedup.bam",
        #       sample = sample,
        #       refbase = refbase),
        #expand("mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam",
        #       sample = sample,
        #       refbase = refbase),
        ## samtools
        #expand("mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam.{bamidx}",
        #       sample = sample,
        #       refbase = refbase,
        #       bamidx = bamidx),
        ## bamCoverage
        #expand("mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bw",
        #       sample = sample,
        #       refbase = refbase),
        # methylation_extractor
        expand("methylation_extracted/CpG_context_{sample}_MappedOn_{refbase}_dedup.txt.gz",
               sample = sample,
               refbase = refbase),
        expand("methylation_extracted/CHG_context_{sample}_MappedOn_{refbase}_dedup.txt.gz",
               sample = sample,
               refbase = refbase),
        expand("methylation_extracted/CHH_context_{sample}_MappedOn_{refbase}_dedup.txt.gz",
               sample = sample,
               refbase = refbase),
#
#        # expand("mapped/{sample}/{sample}_trimmed_bismark_SE_report.txt", sample=SAMPLES),
#        # expand("mapped/{sample}/{sample}_trimmed_bismark.deduplicated.sorted.M-bias.txt", sample=SAMPLES),
#        # expand("mapped/{sample}/{sample}_trimmed_bismark.deduplicated.sorted_splitting_report.txt", sample=SAMPLES),
#
#        # expand("mapped/{sample}/{context}_context_{sample}_trimmed_bismark.deduplicated.sorted.txt.gz", sample=SAMPLES, context=CONTEXT),
#
#        # expand("methylation_extracted/{sample}_{context}.gz.bismark.cov.gz", sample=SAMPLES,context=CONTEXT),
#        # bedGraph="methylation_extracted/{sample}_{context}.gz",
#        # cov=     "mapped/{sample}/{sample}_{context}.gz.bismark.cov.gz",
#
#        expand("coverage/{sample}_MappedOn_" + refbase + "_{context}", sample=SAMPLES.index, context=CONTEXT),
#        expand("coverage/{sample}_MappedOn_" + refbase + "_{context}.gz.bismark.cov", sample=SAMPLES.index, context=CONTEXT),
#        # this rule is buggy, CX_report.txt seems only to contain 0s, deactivated for now.
#        # expand("coverage/{sample}_MappedOn_" + refbase + "_{context}.CX_report.txt", sample=SAMPLES.index, context=CONTEXT),
#        expand("coverage/bws/{sample}_MappedOn_" + refbase + "_{context}.bw", sample=SAMPLES.index, context=CONTEXT),
#
#
## this rule is suitable if only mapping is required
## for example for mapping against lambda phage or mitochondrion to test for conversion
## the converstion rates are reported in the log/bismark folder
## call: snakemake map
#rule map:
#    input:
#        expand("mapped/{sample}_MappedOn_" + refbase +"_trim_bismark_pe.bam", sample=SAMPLES.index),
#
#rule trim:
#    input:
#        expand("trimmed/{sample}_{mate}_trim.fq.gz", sample=SAMPLES.index, mate = mate),
#
#rule sort:
#    input:
#        expand("mapped/{sample}_MappedOn_" + refbase +"_trim_bismark_pe.deduplicated.sorted.bam", sample=SAMPLES.index),
#
#rule bamCoverage:
#    input:
#        expand("mapped/bws/{sample}_MappedOn_" + refbase +"_trim_bismark_pe.deduplicated.sorted.bw", sample=SAMPLES.index),
#
#rule bw:
#    input:
#        expand("coverage/bws/{sample}_MappedOn_" + refbase + "_{context}.bw", sample=SAMPLES.index, context=CONTEXT),

# Run fastqc on R1 and R2 raw data
rule fastqc_raw:
    """Create fastqc reports for raw R1 and R2"""
    input:
        "data/{sample}_{mate}.fastq.gz"
    output:
        html = "logs/fastqc/raw/{sample}_{mate}_fastqc.html",
        # The suffix _fastqc.zip is required for multiqc to find the file
        zip  = "logs/fastqc/raw/{sample}_{mate}_fastqc.zip"
    params:
        " --extract"
    log:
        "logs/fastqc/raw/{sample}_{mate}.log"
    wrapper:
        "0.38.0/bio/fastqc"

# Trim off adapters and low-quality bases
rule trim_galore:
    """Remove adapters and low-quality bases"""
    input:    
        r1 = "data/{sample}_" + mate[0] + ".fastq.gz",
        r2 = "data/{sample}_" + mate[1] + ".fastq.gz"
    output:
        r1 = "trimmed/{sample}_" + mate[0] + "_trimmed.fastq.gz",
        r2 = "trimmed/{sample}_" + mate[1] + "_trimmed.fastq.gz"
    threads: 4
    params:
        extra = config["TRIM"]["extra_params_trim_galore"]
    log:
        std = "logs/trim_galore/{sample}_trimmed.log",
        r1  = "{sample}_" + mate[0] + ".fastq.gz_trimming_report.txt",
        r2  = "{sample}_" + mate[1] + ".fastq.gz_trimming_report.txt"
    shell:
        "(trim_galore --paired"
        " --cores {threads}"
        " --output_dir trimmed"
        " {params.extra}"
        " {input.r1} {input.r2} ) &> {log.std}; "
        "rename 's/val_[12].fq.gz/trimmed.fastq.gz/g' trimmed/{wildcards.sample}* ; "
        "mv trimmed/{log.r1} logs/trim_galore/ ; "
        "mv trimmed/{log.r2} logs/trim_galore/"
#        """
#        (trim_galore --paired --cores {threads} --output_dir trimmed {params.extra} {input.r1} {input.r2} ) &> {log.se} 
#        rename 's/val_[12].fq.gz/trimmed.fastq.gz/g' trimmed/{wildcards.sample}*
#        mkdir --parents logs/trim_galore
#        mv trimmed/{log.r1} logs/trim_galore/
#        mv trimmed/{log.r2} logs/trim_galore/
#        """

# Run fastqc on R1 and R2 trimmed data
rule fastqc_trimmed:
    """Create fastqc reports for trimmed R1 and R2"""
    input:
        "trimmed/{sample}_{mate}_trimmed.fastq.gz"
    output:
        html = "logs/fastqc/trimmed/{sample}_{mate}_trimmed_fastqc.html",
        # The suffix _fastqc.zip is required for multiqc to find the file
        zip  = "logs/fastqc/trimmed/{sample}_{mate}_trimmed_fastqc.zip"
    params:
        " --extract"
    log:
        "logs/fastqc/trimmed/{sample}_{mate}_trimmed.log"
    wrapper:
        "0.38.0/bio/fastqc"

# Align to reference genome and call methylated cytosines
rule bismark:
    """Map reads using bismark and call methylated cytosines"""
    input:
        r1 = "trimmed/{sample}_" + mate[0] + "_trimmed.fastq.gz",
        r2 = "trimmed/{sample}_" + mate[1] + "_trimmed.fastq.gz"
    output:
        protected("mapped/{sample}_MappedOn_{refbase}.bam")
    threads: 8
    params:
        extra = config["MAPPING"]["extra_params_bismark"]
    log:
        std = "logs/bismark/{sample}_MappedOn_{refbase}.log",   
        rep = "logs/bismark/{sample}_MappedOn_{refbase}_report.txt",
        nuc = "logs/bismark/{sample}_MappedOn_{refbase}.nucleotide_stats.txt"
    shell:
        # USAGE: bismark [options] <genome_folder> {-1 <mates1> -2 <mates2> | <singles>}
        "(bismark"
        " --bowtie2" 
        " --parallel {threads}"
        " --nucleotide_coverage"
        # Please note that the option -B/--basename in conjunction with --multicore is
        # currently not supported (as in: disabled), but we are aiming to address this soon
        # https://www.bioinformatics.babraham.ac.uk/projects/bismark/
#        " --basename {wildcards.sample}_MappedOn_{refbase}"
#        " --prefix {wildcards.sample}_MappedOn_{refbase}"
        " --output_dir mapped"
        " {params.extra}"
        " {reference}"
        " -1 {input.r1} -2 {input.r2} ) &> {log.std}; "
        "mv mapped/{wildcards.sample}_R1_trimmed_bismark_bt2_pe.bam {output} ; "
        "mv mapped/{wildcards.sample}_R1_trimmed_bismark_bt2_PE_report.txt {log.rep} ; "
        "mv mapped/{wildcards.sample}_R1_trimmed_bismark_bt2_pe.nucleotide_stats.txt {log.nuc}"

#mv mapped/BSseq_Rep8a_SRR6792678_R1_trimmed_bismark_bt2_pe.bam mapped/BSseq_Rep8a_SRR6792678_MappedOn_wheat_v1.0_incl_organelles_controls.bam
#mv mapped/BSseq_Rep8a_SRR6792678_R1_trimmed_bismark_bt2_PE_report.txt logs/bismark/BSseq_Rep8a_SRR6792678_MappedOn_wheat_v1.0_incl_organelles_controls_report.txt
#mv mapped/BSseq_Rep8a_SRR6792678_R1_trimmed_bismark_bt2_pe.nucleotide_stats.txt logs/bismark/BSseq_Rep8a_SRR6792678_MappedOn_wheat_v1.0_incl_organelles_controls.nucleotide_stats.txt

# Remove duplicate alignments
rule deduplicate_bismark:
    """Remove duplicate paired-end read alignments from the Bismark mapping output"""
    # "*** Please note that for paired-end BAM files the deduplication script expects Read1 and Read2 to
    # follow each other in consecutive lines! If the file has been sorted by position make sure that you resort it
    # by read name first (e.g. using samtools sort -n) ***"
    input:
        "mapped/{sample}_MappedOn_{refbase}.bam"
    output:
        dedup = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup.bam",
        sort  = protected("mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam")
    params:
        sortMemory = config["MAPPING"]["sortMemory"]
    threads: config["THREADS"]
    log:
        std = "logs/deduplicate_bismark/{sample}_MappedOn_{refbase}_dedup.log",   
        rep = "logs/deduplicate_bismark/{sample}_MappedOn_{refbase}_dedup_report.txt"
    shell:
        # USAGE: deduplicate_bismark [options] <filename(s)>
        "(deduplicate_bismark"
        " --paired"
        " --output_dir mapped/dedup"
        " --bam"
        " {input} ) &> {log.std}; "
        "mv mapped/dedup/{wildcards.sample}_MappedOn_{refbase}.deduplicated.bam {output.dedup} ; "
        "mv mapped/dedup/{wildcards.sample}_MappedOn_{refbase}.deduplication_report.txt {log.rep} ; "
        "samtools sort -@ {threads} -m {params.sortMemory} -o {output.sort} {output.dedup}"

# Index deduplicated Bismark mapping output and generate coverage bigWig
# Index format (bai or csi) depends on chromosome sizes
if bamidx == "bai":
    rule samtools:
        """bai-index deduplicated Bismark mapping output"""
        input:
            "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam"
        output:
            "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam.{bamidx}"
        shell:
            "samtools index {input}"
    rule bamCoverage:
        """Calculate coverage in bigWig (bw) format"""
        input:
            BAM    = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam",
            BAMidx = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam.bai"
        output:
            BW = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bw"
        params:
            binSize = config["COVERAGE"]["binSize"]
        threads: config["THREADS"]
        log:
            "logs/bamCoverage/{sample}_MappedOn_{refbase}_dedup_sort_bw.log"
        shell:
            "(bamCoverage -b {input.BAM} -o {output.BW}"
            " --extendReads"
            " --binSize {params.binSize} -p {threads}) &> {log}"
else:
    rule samtools:
        """csi-index deduplicated Bismark mapping output"""
        input:
            "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam"
        output:
            "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam.{bamidx}"
        shell:
            "samtools index -c -m 14 {input}"
    rule bamCoverage:
        """Calculate coverage in bigWig (bw) format"""
        input:
            BAM    = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam",
            BAMidx = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bam.csi"
        output:
            BW = "mapped/dedup/{sample}_MappedOn_{refbase}_dedup_sort.bw"
        params:
            binSize = config["COVERAGE"]["binSize"]
        threads: config["THREADS"]
        log:
            "logs/bamCoverage/{sample}_MappedOn_{refbase}_dedup_sort_bw.log"
        shell:
            "(bamCoverage -b {input.BAM} -o {output.BW}"
            " --extendReads"
            " --binSize {params.binSize} -p {threads} ) &> {log}"

# Extract the methylation call for each cytosine analysed
# and output in context-specific files
# NOTE: BAM must be unsorted, with second read in a pair following first
rule methylation_extractor:
    """Extract the methylation call for each cytosine analysed in context-specific manner"""
    input:
        "mapped/dedup/{sample}_MappedOn_{refbase}_dedup.bam"
    output:
        CpG = "methylation_extracted/CpG_context_{sample}_MappedOn_{refbase}_dedup.txt.gz",
        CHG = "methylation_extracted/CHG_context_{sample}_MappedOn_{refbase}_dedup.txt.gz",
        CHH = "methylation_extracted/CHH_context_{sample}_MappedOn_{refbase}_dedup.txt.gz"
    # "Please note that a typical process of extracting a BAM file and writing out '.gz'
    # output streams will in fact use ~3 cores per value of --parallel <int> specified
    # (1 for the methylation extractor itself, 1 for a Samtools stream, 1 for GZIP stream),
    # so --parallel 10 is likely to use around 30 cores of system resources."
    threads: 10
    log:
        "logs/methylation_extractor/{sample}_MappedOn_{refbase}_dedup_methylation_extractor.log"
    shell:
        # USAGE: bismark_methylation_extractor [options] <filenames>
        "(bismark_methylation_extractor"
        " --paired-end"
        " --comprehensive"
        " --output methylation_extracted"
        " --gzip"
        " --parallel {threads}"
        " {input} ) &> {log}"

#    shell:
#        """
#        bismark_methylation_extractor {params.extra} --gzip --paired-end --multicore {threads}  --genome_folder {params.ref} -s {input.bam} --output methylation_extracted 2> {log}
#        """
#rule methylation_extractor:
#    # USAGE: bismark_methylation_extractor [options] <filenames>
#    input:
#        bam="mapped/{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.bam",
#    output:
#        CHH="methylation_extracted/CHH_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        CHG="methylation_extracted/CHG_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        CpG="methylation_extracted/CpG_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        # "methylation_extracted/{CONTEXT}_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        # split="mapped/{sample}/{sample}_trim_bismark.deduplicated.sorted_splitting_report.txt",
#        # mbias="mapped/{sample}/{sample}_trim_bismark.deduplicated.sorted.M-bias.txt",
#        # cg="mapped/{sample}/CpG_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#        # chg="mapped/{sample}/CHG_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#        # chh="mapped/{sample}/CHH_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#    params:
#        ref=REFERENCE,
#        extra=extra_params_meth_extractor,
#    threads: 4
#    log:
#        "logs/bismark/{sample}_MappedOn_{refbase}.methylation_extractor.log",
#    shell:
#        """
#        bismark_methylation_extractor {params.extra} --gzip --paired-end --multicore {threads}  --genome_folder {params.ref} -s {input.bam} --output methylation_extracted 2> {log}
#        """
##%_fusedICv2_all.cov2cyt: %_fusedICv2_pe.bam
##	#not doing --bedgraph option since the filenames are messed up, doing this manualy
##	#p stands for paired end
##	${bismark_dir}/bismark_methylation_extractor -p --no_overlap --ample_memory --ignore_r2 2 --report --multicore $(threads) $?
##	${bismark_dir}/bismark_methylation_extractor -s --ample_memory --report --multicore $(threads) $*_fusedICv2_unmapped_reads.bam
#
##	$(eval files_CHG = CHG_OB_$*_fusedICv2_pe.txt CHG_OT_$*_fusedICv2_pe.txt CHG_OB_$*_fusedICv2_unmapped_reads.txt CHG_OT_$*_fusedICv2_unmapped_reads.txt)
##	$(eval files_CHH = CHH_OB_$*_fusedICv2_pe.txt CHH_OT_$*_fusedICv2_pe.txt CHH_OB_$*_fusedICv2_unmapped_reads.txt CHH_OT_$*_fusedICv2_unmapped_reads.txt)
##	$(eval files_CpG = CpG_OB_$*_fusedICv2_pe.txt CpG_OT_$*_fusedICv2_pe.txt CpG_OB_$*_fusedICv2_unmapped_reads.txt CpG_OT_$*_fusedICv2_unmapped_reads.txt)
##	${bismark_dir}bismark2bedGraph --CX -o $*_fusedICv2_CHG.bedgraph $(files_CHG)
##	${bismark_dir}bismark2bedGraph --CX -o $*_fusedICv2_CHH.bedgraph $(files_CHH)
##	${bismark_dir}bismark2bedGraph --CX -o $*_fusedICv2_CpG.bedgraph $(files_CpG)
##	${bismark_dir}bismark2bedGraph --CX -o $*_fusedICv2_all.bedgraph $(files_CpG) $(files_CHH) $(files_CHG)
#
#rule methylation_extractor:
#    # USAGE: bismark_methylation_extractor [options] <filenames>
#    input:
#        bam="mapped/{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.bam",
#    output:
#        CHH="methylation_extracted/CHH_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        CHG="methylation_extracted/CHG_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        CpG="methylation_extracted/CpG_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        # "methylation_extracted/{CONTEXT}_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#        # split="mapped/{sample}/{sample}_trim_bismark.deduplicated.sorted_splitting_report.txt",
#        # mbias="mapped/{sample}/{sample}_trim_bismark.deduplicated.sorted.M-bias.txt",
#        # cg="mapped/{sample}/CpG_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#        # chg="mapped/{sample}/CHG_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#        # chh="mapped/{sample}/CHH_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#    params:
#        ref=REFERENCE,
#        extra=extra_params_meth_extractor,
#    threads: 4
#    log:
#        "logs/bismark/{sample}_MappedOn_{refbase}.methylation_extractor.log",
#    shell:
#        """
#        bismark_methylation_extractor {params.extra} --gzip --paired-end --multicore {threads}  --genome_folder {params.ref} -s {input.bam} --output methylation_extracted 2> {log}
#        """
#
#rule bismark2bedGraph:
#    # bedGraph file as well as a coverage file which are both sorted by chromosomal position.
#    input:
#        # extract="mapped/{sample}/{context}_context_{sample}_trim_bismark.deduplicated.sorted.txt.gz",
#        methylex="methylation_extracted/{context}_context_{sample}_MappedOn_{refbase}_trim_bismark_pe.deduplicated.sorted.txt.gz",
#    output:
#        bedGraph="coverage/{sample}_MappedOn_{refbase}_{context}",
#        cov=     "coverage/{sample}_MappedOn_{refbase}_{context}.gz.bismark.cov",
#    params:
#        extra=extra_params_bismark2bedGraph,
#    log:
#        "logs/bismark/{sample}_MappedOn_{refbase}_{context}.bismark2bedGraph.log",
#    shell:
#        # gzip outfiles even without --gzip option. Need to unzip manual for later bigwiggle rule
#        """
#        bismark2bedGraph {params.extra} --CX {input.methylex} -o {wildcards.sample}_MappedOn_{refbase}_{wildcards.context} --dir coverage 2> {log}
#        gunzip {output.bedGraph}.gz
#        gunzip {output.cov}.gz
#        """
#
## this rule is buggy, CX_report.txt seems only to contain 0s, deactivated for now.
#rule coverage2cytosine:
#    # generates a cytosine methylation report for a genome of interest and a sorted methylation input file produced
#    # by the script bismark2bedGraph or the bismark_methylation_extractor when '--bedGraph' was specified. The input files
#    # (.cov or .cov.gz) are expected to use 1-based genomic coordinates. By default, the output uses 1-based chromosomal coordinates
#    # and reports CpG positions only (for both strands individually and not merged in any way).
#    # The input file needs to have been generated with the script bismark2bedGraph (the file is called *.cov, or .cov.gz) or
#    # otherwise be sorted by position and exactly in the following format:
#    # USAGE: coverage2cytosine [options] --genome_folder <path> -o <output> [input]
#    input:
#        bedGraph="coverage/{sample}_MappedOn_{refbase}_{context}",
#    output:
#        cov2cyt="coverage/{sample}_MappedOn_{refbase}_{context}.CX_report.txt",
#    log:
#        "logs/bismark/{sample}_MappedOn_{refbase}_{context}.coverage2cytosine.log",
#    params:
#        ref=REFERENCE,
#        extra=extra_params_coverage2cytosine,
#    shell:
#        # genome_folder needs to contain fa rather than fasta!
#        """
#        coverage2cytosine {params.extra} --genome_folder {params.ref} -o {input.bedGraph} --dir . {input.bedGraph} 2> {log}
#        """
#
#rule bedGraphToBigWig:
#    # usage:
#    #    bedGraphToBigWig in.bedGraph chrom.sizes out.bw
#    # where in.bedGraph is a four column file in the format:
#    #       <chrom> <start> <end> <value>
#    # and chrom.sizes is a two-column file/URL: <chromosome name> <size in bases>
#    # and out.bw is the output indexed big wig file.
#    input:
#        bedGraph="coverage/{sample}_MappedOn_{refbase}_{context}",
#    output:
#        bw="coverage/bws/{sample}_MappedOn_{refbase}_{context}.bw",
#    log:
#        "logs/bismark/{sample}_MappedOn_{refbase}_{context}.bedGraphToBigWig.log",
#    params:
#        ref=REFERENCE,
#    shell:
#        # fai files needs to be present to serve as chrom.sizes and can be created by:
#        # samtools faidx input.fa
#        # cut -f1,2 input.fa.fai > sizes.genome
#        """
#        sed 1d {input.bedGraph} | LC_COLLATE=C sort -k1,1 -k2,2n > {input.bedGraph}_sorted
#        bedGraphToBigWig {input.bedGraph}_sorted {params.ref}/{refbase}.fa.fai {output} 2> {log}
#        rm {input.bedGraph}_sorted
#        """
#
	# ${bismark_dir}coverage2cytosine --genome_folder ${index_bismarck} --CX -o $*_fusedICv2_all.cov2cyt $*_fusedICv2_all.bedgraph.gz.bismark.cov.gz

	# gunzip $*_fusedICv2_CHG.bedgraph.gz $*_fusedICv2_CpG.bedgraph.gz $*_fusedICv2_CHH.bedgraph.gz
	# ${bedGraphToBigWig} $*_fusedICv2_CpG.bedgraph  ${chromsizes} $*_fusedICv2_CpG.bw
	# ${bedGraphToBigWig} $*_fusedICv2_CHH.bedgraph  ${chromsizes} $*_fusedICv2_CHH.bw
	# ${bedGraphToBigWig} $*_fusedICv2_CHG.bedgraph  ${chromsizes} $*_fusedICv2_CHG.bw
	# rm $*_fusedICv2_CHG.bedgraph $*_fusedICv2_CpG.bedgraph $*_fusedICv2_CHH.bedgraph
